by using SKLEARN
import scikit learn
use e1070
use sklearn
import suitable machine learning package
use appropriate ML package
refer a machine learning library
import some machine learning module
use similar kind of machine learning library to Scikit Learn
load FuzzyWuzzy
by using os
use module_name
import module
using a given_module_name
import package_name
import confusion_matrix from sklearn
use a preprocessing library
from sklearn import preprocessing
import library DataVisualization
read dataset
dataset = dataset_name
loading dataset ds1
Build the model by using the dataset
use given dataset
Load dataset
using the given csv file
load data set as ds
source file = dataset
by using the given CSV file as the data set
refer to the uploaded data set
put the given data set in to a data frame
normalize if necessary
columns to be normalized = 3, 4
normalize column1 to column 5
apply normalization
normalize dataset
apply normalization to column1 and column2
features to be normalized = name, age, place
normalize attribute 1, attribute 2, attribute 3 and attribute 5
use scaler to normalize attribute values
normalize by using scaler
normalize feature set
display words
print line text
println(some word pharse)
print()
print something
print
print anything
show (result)
display the requested result on the screen
use 0.1 from the data set for validation
validation = 0.256
split dataset in to test and train
split dataset
test,train ratio = 0.24
allocate 35% for testing
define a variable called test and assign 0.78 to it
35% for testing
test size = 0.3
test set is 0.6 of data set
use 60% data for testing
use 78% of the source data to learning
use 0.2 of data for build the model
training set = 0.4
train/test ratio = 0.48
allocate 60% for training
train 80%
define a floating point variable train and assign 0.89
define double variable called train with value 0.78
train ratio is 0.5
use 0.8 to train the model
0.75 for training
use 60% data for training
declare a floating point variable called train_set and assign 0.078 to it
create the model
build model
implement clustering algorithm
start above mentioned algorithm
Apply ml algorithm to data set
Begin clustering
implement algorithm
Apply algorithm
Start classification
until the condition is true
while()
while something:
while (1):
white true
do infinitely
goodness is a variable with class instance goody
create variable named rainfall and assign rain to it
lemmatizer is lemmatizer () in NLTK
depth = depthclass()
define a variable called burnable and initiate burn class as value
assign some_class instance to variable def
declare a variable named tfidf_transformer, and assign tfidf transformer()
define variable le and instantiate label encoder
define variable scaler and assign standard scaler class
show confusion matrix
obtain the confusion matrix by using predictions
find confusion matrix
define variable cm and generate confusion matrix for predictions
return confusion matrix as ca
apply confusion matrix
calculate relevant confusion matrix
use attribute 1, attribute 2, attribute 3 , attribute 4 and attribute 5 for learning
features to be used to learn = weight, height, length
selected features = 9999, 4444
use 4444, findex1, findex2, findex9 columns
columns to be considered = findex2, findex9
attributes are column 1 , column 2 and column 6
features = runs, wickets, no_of_100's, average, strke_rates
use knn from the machine learning package
import k-means from ML library
import KNN
import NN from Machine Learning library
import library SVM
import library Logistic Regression

import library Random Forest
import library Gaussian Naive Bayes
import library Multinomial Naive Bayes
import k-nearest neghbour library
to encode object type columns as numeric
numerize dataframe column and reassign dataframe column
numerize feature set
numerize attribute 1, attribute 2, attribute 3 and attribute 5
features to be numerized = name, age, place
apply numerization to column1 and column2
numerize dataset
numerize column1 to column 5
columns to be numerized = 3, 4
numerize if necessary
apply numerization
use learned model to predict feature for my_list
predict relevant class for dp
apply sample data to the model and obtain class
find class for given data point
predict clf for new_datapoint
parse list_values to model and obtain predicted classes
drop data points which do not contain value for class
do not consider data points with empty cell in target class
ignore rows with no data in class feature
take only values not empty in class atribute
delete cells with null value in class column
remove null cells in target class
remove datapoints that have NULL target_class from the dataframe and reassign dataframe
remove null data points in train set
fill incomplete values by using lbcf
replace values for unfilled cells from nocf
remove null values in column4 by using column average
replace NaN values with next observation carried forawrd
replace Null values with last observation carried forawrd
replace empty values with the column mean and reassign dataframe
put train and test sets in to separate data frames
separate training and testing sets
split dataset by split_ratio
define train and validate sets and classes
assign train set to X_train, y_train and test set to X_test, y_test
assign test set to X_test and test class to y_test
assign train set to X_train and train class to y_train
separate data set for training and validation
divide dataset in to training and testing sets
split dataframe feature set and target class
fill empty array temp with name, age and weight
add 49, 45 to array iop
ruplef is a list with values computer, phone, book, 465, and 244.43
define a string array called str_array and put flowers, guitars, elephants and drums to it
num_array = Arshad, Milan
create a list named temp_list and add 'Milan', 'Madusha', 'Dinusha', 'Arshad', 'Ruchira'
assign 45, 89 ,45 ,12 and 44 to number_array
my_list.append(runs, wickets, total, strike_rate)
add element1 to element_list
append age, height, skills to the list named my_list
import similar library to Numpy
import library multidimensional array
